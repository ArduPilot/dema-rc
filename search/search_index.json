{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\"Linux Drone Remote Controller\" or dema-rc is a software for drone Remote Control using WiFi rather than traditional RF protocols. It can be used in any computer running Linux with a joystick, including \"embedded\" boards like Raspberry Pi, BeagleBone, etc. Also there are commercial off-the-shelf controllers supported: the current focus of the project is supporting Parrot SkyController 2 . Other versions and controllers may be supported, but not without changing the code.","title":"Home"},{"location":"install-ardupilot/","text":"ArduPilot on Disco \u00b6 Installing ArduPilot on Disco can be done by following their documentation . Here we deviate a little bit, particularly to use our toolchain that allows doesn't require ArduPilot to be statically built, which allows using libiio to read the sonar and us of Parrot's telemetry module to integrate with the camera. Build ArduPilot \u00b6 Use the same toolchain used for dema-rc, see previous chapter . Assuming that the toolchain is setup, you already cloned ArduPilot's repo and fetched submodules: $ ./waf configure --board disco $ ./waf plane Connect to Disco \u00b6 Double click the pitot-button on Disco to enable incoming connections. You have 2 options to connect to Disco: either via WiFi or via USB (using rndis, i.e. it will create an ethernet link over USB): Method Command WiFi adb connect 192.168.42.1:9050 USB adb connect 192.168.43.1:9050 If you choose USB, make sure to activate it first: double press the power button. Copy some additional libraries: \u00b6 $ adb shell mkdir -p /data/ftp/internal_000/ardupilot/lib $ adb push \\ /opt/arm-buildroot-linux-gnueabihf_sdk-buildroot/arm-buildroot-linux-gnueabihf/sysroot/usr/lib/libserialport.so.0 \\ /data/ftp/internal_000/ardupilot/lib/libserialport.so.0 $ adb push \\ /opt/arm-buildroot-linux-gnueabihf_sdk-buildroot/arm-buildroot-linux-gnueabihf/sysroot/usr/lib/libiio.so.0 \\ /data/ftp/internal_000/ardupilot/lib/libiio.so.0 Copy arduplane \u00b6 $ adb push build/disco/bin/arduplane /data/ftp/internal_000/ardupilot/arduplane Default parameters \u00b6 To make it easier for first setup, copy pre-configured parameters from ArduPilot's repo : $ adb push Parrot_Disco.param /data/ftp/internal_000/ardupilot/disco.parm Another option is to simply load them from your preferred GCS. Manually check if ArduPilot can be executed \u00b6 Before automating the startup, make sure to run it once on the terminal to check if everything is working: $ adb shell $ kk $ LD_LIBRARY_PATH = /data/ftp/internal_000/ardupilot/lib \\ /data/ftp/internal_000/ardupilot/arduplane \\ -A udpin:0.0.0.0:14550 \\ -B /dev/ttyPA1 \\ -C udp:192.168.43.255:14550:bcast This should start ArduPilot (so you will hear the buzzer) and telemetry will be sent via both USB and WiFi. Now you should be able to start your GCS and communicate with the drone, go through calibration procedures, etc. Configuring QGC for Disco \u00b6 Start QGC, enter application settings and comm links. Click \"add\" , configure Name as \"Disco\" , type as UDP, check \"Automatically connect on Start\" Let listening port be 14550, under Target hosts, click \"Add\" , enter 192.168.53.1 Click OK Go to \"general\" , scroll down to \"video\" section. Set \"video source\" to \"UDP h.264 video stream\" Set \"UDP port\" to \"8888\" Starting ArduPlane and connecting to GCS. \u00b6 Switch on Disco and SC2 On SC2, click the settings button, expect LED flashing blue, then go solid blue. Click the pitot tube three times, see it flash blue/red and play the ArduPilot boot sound. You should now see the servos move on RC input and attitude changes. Start QGC on a computer and connect SC2 to the computer using ethernet adapter and ethernet cable. (The ethernet interface of the computer should be configured for DHCP.) Start the preconfigured QGC, telemetry will autoconnect (you should see voltage/attitude) Press button \"B\" on SC2 to toggle streaming, you should now the video stream. Automatically start ArduPilot \u00b6 Although possible, it's not provided a way in this documentation to start only arduplane in Disco. Otherwise switching back and forth becomes troublesome and error prone. So we keep boot sequences as they are and provide a way to switch to ardupilot. On Disco, edit this file: /usr/bin/apm-plane-disco.sh and change: - exec ${rw_apm} $@ + exec LD_LIBRARY_PATH=/data/ftp/internal_000/ardupilot/lib ${rw_apm} $@ Press the power button 3 times rapidly . This will switch from the stock flight stack to ArduPilot.","title":"ArduPilot on Disco"},{"location":"install-ardupilot/#ardupilot-on-disco","text":"Installing ArduPilot on Disco can be done by following their documentation . Here we deviate a little bit, particularly to use our toolchain that allows doesn't require ArduPilot to be statically built, which allows using libiio to read the sonar and us of Parrot's telemetry module to integrate with the camera.","title":"ArduPilot on Disco"},{"location":"install-ardupilot/#build-ardupilot","text":"Use the same toolchain used for dema-rc, see previous chapter . Assuming that the toolchain is setup, you already cloned ArduPilot's repo and fetched submodules: $ ./waf configure --board disco $ ./waf plane","title":"Build ArduPilot"},{"location":"install-ardupilot/#connect-to-disco","text":"Double click the pitot-button on Disco to enable incoming connections. You have 2 options to connect to Disco: either via WiFi or via USB (using rndis, i.e. it will create an ethernet link over USB): Method Command WiFi adb connect 192.168.42.1:9050 USB adb connect 192.168.43.1:9050 If you choose USB, make sure to activate it first: double press the power button.","title":"Connect to Disco"},{"location":"install-ardupilot/#copy-some-additional-libraries","text":"$ adb shell mkdir -p /data/ftp/internal_000/ardupilot/lib $ adb push \\ /opt/arm-buildroot-linux-gnueabihf_sdk-buildroot/arm-buildroot-linux-gnueabihf/sysroot/usr/lib/libserialport.so.0 \\ /data/ftp/internal_000/ardupilot/lib/libserialport.so.0 $ adb push \\ /opt/arm-buildroot-linux-gnueabihf_sdk-buildroot/arm-buildroot-linux-gnueabihf/sysroot/usr/lib/libiio.so.0 \\ /data/ftp/internal_000/ardupilot/lib/libiio.so.0","title":"Copy some additional libraries:"},{"location":"install-ardupilot/#copy-arduplane","text":"$ adb push build/disco/bin/arduplane /data/ftp/internal_000/ardupilot/arduplane","title":"Copy arduplane"},{"location":"install-ardupilot/#default-parameters","text":"To make it easier for first setup, copy pre-configured parameters from ArduPilot's repo : $ adb push Parrot_Disco.param /data/ftp/internal_000/ardupilot/disco.parm Another option is to simply load them from your preferred GCS.","title":"Default parameters"},{"location":"install-ardupilot/#manually-check-if-ardupilot-can-be-executed","text":"Before automating the startup, make sure to run it once on the terminal to check if everything is working: $ adb shell $ kk $ LD_LIBRARY_PATH = /data/ftp/internal_000/ardupilot/lib \\ /data/ftp/internal_000/ardupilot/arduplane \\ -A udpin:0.0.0.0:14550 \\ -B /dev/ttyPA1 \\ -C udp:192.168.43.255:14550:bcast This should start ArduPilot (so you will hear the buzzer) and telemetry will be sent via both USB and WiFi. Now you should be able to start your GCS and communicate with the drone, go through calibration procedures, etc.","title":"Manually check if ArduPilot can be executed"},{"location":"install-ardupilot/#configuring-qgc-for-disco","text":"Start QGC, enter application settings and comm links. Click \"add\" , configure Name as \"Disco\" , type as UDP, check \"Automatically connect on Start\" Let listening port be 14550, under Target hosts, click \"Add\" , enter 192.168.53.1 Click OK Go to \"general\" , scroll down to \"video\" section. Set \"video source\" to \"UDP h.264 video stream\" Set \"UDP port\" to \"8888\"","title":"Configuring QGC for Disco"},{"location":"install-ardupilot/#starting-arduplane-and-connecting-to-gcs","text":"Switch on Disco and SC2 On SC2, click the settings button, expect LED flashing blue, then go solid blue. Click the pitot tube three times, see it flash blue/red and play the ArduPilot boot sound. You should now see the servos move on RC input and attitude changes. Start QGC on a computer and connect SC2 to the computer using ethernet adapter and ethernet cable. (The ethernet interface of the computer should be configured for DHCP.) Start the preconfigured QGC, telemetry will autoconnect (you should see voltage/attitude) Press button \"B\" on SC2 to toggle streaming, you should now the video stream.","title":"Starting ArduPlane and connecting to GCS."},{"location":"install-ardupilot/#automatically-start-ardupilot","text":"Although possible, it's not provided a way in this documentation to start only arduplane in Disco. Otherwise switching back and forth becomes troublesome and error prone. So we keep boot sequences as they are and provide a way to switch to ardupilot. On Disco, edit this file: /usr/bin/apm-plane-disco.sh and change: - exec ${rw_apm} $@ + exec LD_LIBRARY_PATH=/data/ftp/internal_000/ardupilot/lib ${rw_apm} $@ Press the power button 3 times rapidly . This will switch from the stock flight stack to ArduPilot.","title":"Automatically start ArduPilot"},{"location":"install-demarc/","text":"Dema-rc on SC2 \u00b6 Here you will find information on how to get dema-rc installed and configured on SkyController2. After ensuring you are connected through adb, you have 2 options: use pre-built binaries or install from source. See details below. Connect to SkyController2 via adb \u00b6 Turn on the controller and connect it to your computer via usb-ethernet device. Connect to it via adb: $ adb connect 192 .168.53.1:9050 Install prebuilt binaries \u00b6 Currently there is no released version, so just use latest master branch. Binaries are available directly from CI: $ curl -JOL https://gitlab.com/lucas.de.marchi/dema-rc/-/jobs/artifacts/master/raw/build/dema-rc-bundle.tar.gz?job = bundle-sc2 $ curl -JOL https://raw.githubusercontent.com/lucasdemarchi/dema-rc/master/tools/install-sc2.sh $ chmod +x install-sc2.sh $ export ANDROID_SERIAL = 192 .168.53.1:9050 $ ./install-sc2.sh bundle.tar.gz Note Setting ANDROID_SERIAL environment var is not strictly necessary if adb is connected to only one device. If you have more devices connected like, e.g. Disco/Bebop, you need to set it though. Now you should we an output like this: Space requirements on SkyController 2: /data: Free: 4344 KB Required: 172 KB /: Free: 7736 KB Required: 8 KB Installing these files on SkyController 2: ./data/ftp/internal_000/dema-rc/usr/bin/dema-rc-cm ./data/ftp/internal_000/dema-rc/usr/bin/dema-rc ./data/ftp/internal_000/dema-rc/usr/bin/dema-rc-btn ./etc/boxinit.d/99-demarc.rc ./etc/dema-rc/dema-rc.conf ################ SkyController 2 ################ Mounting / as rw... Removing previous installation under /data/ftp/internal_000/dema-rc/usr /tmp/demarc-install.iKTnE9PN/./: 5 files pushed. 2.2 MB/s (170483 bytes in 0.073s) Fixing up file permissions... Installation finished successfully, please reboot SkyController 2 Build and install dema-rc from source \u00b6 You can also build dema-rc. For that you will need an armv7 toolchain with some specific tunables. Since we build dema-rc on CI, we already have a recommended toolchain based on buildroot . You can download the latest one: toolchain . Extract it to /opt and add to PATH: $ export PATH = /opt/arm-buildroot-linux-gnueabihf_sdk-buildroot/bin/: $PATH Configure dema-rc: $ meson setup \\ -Dboard = sc2 \\ --cross-file /opt/arm-buildroot-linux-gnueabihf_sdk-buildroot/etc/meson/cross-compilation.conf \\ build Build: $ ninja -C build Create bundle to install on SkyControler2: $ ninja -C build bundle Install on SkyController2: $ export ANDROID_SERIAL = 192 .168.53.1:9050 $ ./tools/install-sc2.sh build/dema-rc-bundle.tar.gz When developing on dema-rc and only modifying the main program, you can skip the bundle creation and push only that binary: $ adb push build/src/dema-rc /data/ftp/internal_000/dema-rc/usr/bin/dema-rc Note that the command above installs only the main binary. Check in the install log above the other files that need to be sent if you modified it. Change SSID dema-rc will connect to \u00b6 As part of the installed files above, we install a script to start, stop and monitor the WiFi connections. Since SkyController2 will connect to Disco, you need to configure its SSID. The file is in /data/ftp/internal_000/ssid.txt . Automatically start dema-rc \u00b6 dema-rc already installs the integration files to start dema-rc on boot. However it leaves the original SW stack as the default. To switch to dema-rc to use with ArduPilot, simply press the \"settings\" button on SkyController2. The LED that was red/green will now behave as following: Blinking blue when dema-rc is started and until it connects to WiFi Solid blue while it remains connected to a WiFi network.","title":"Dema-rc on SC2"},{"location":"install-demarc/#dema-rc-on-sc2","text":"Here you will find information on how to get dema-rc installed and configured on SkyController2. After ensuring you are connected through adb, you have 2 options: use pre-built binaries or install from source. See details below.","title":"Dema-rc on SC2"},{"location":"install-demarc/#connect-to-skycontroller2-via-adb","text":"Turn on the controller and connect it to your computer via usb-ethernet device. Connect to it via adb: $ adb connect 192 .168.53.1:9050","title":"Connect to SkyController2 via adb"},{"location":"install-demarc/#install-prebuilt-binaries","text":"Currently there is no released version, so just use latest master branch. Binaries are available directly from CI: $ curl -JOL https://gitlab.com/lucas.de.marchi/dema-rc/-/jobs/artifacts/master/raw/build/dema-rc-bundle.tar.gz?job = bundle-sc2 $ curl -JOL https://raw.githubusercontent.com/lucasdemarchi/dema-rc/master/tools/install-sc2.sh $ chmod +x install-sc2.sh $ export ANDROID_SERIAL = 192 .168.53.1:9050 $ ./install-sc2.sh bundle.tar.gz Note Setting ANDROID_SERIAL environment var is not strictly necessary if adb is connected to only one device. If you have more devices connected like, e.g. Disco/Bebop, you need to set it though. Now you should we an output like this: Space requirements on SkyController 2: /data: Free: 4344 KB Required: 172 KB /: Free: 7736 KB Required: 8 KB Installing these files on SkyController 2: ./data/ftp/internal_000/dema-rc/usr/bin/dema-rc-cm ./data/ftp/internal_000/dema-rc/usr/bin/dema-rc ./data/ftp/internal_000/dema-rc/usr/bin/dema-rc-btn ./etc/boxinit.d/99-demarc.rc ./etc/dema-rc/dema-rc.conf ################ SkyController 2 ################ Mounting / as rw... Removing previous installation under /data/ftp/internal_000/dema-rc/usr /tmp/demarc-install.iKTnE9PN/./: 5 files pushed. 2.2 MB/s (170483 bytes in 0.073s) Fixing up file permissions... Installation finished successfully, please reboot SkyController 2","title":"Install prebuilt binaries"},{"location":"install-demarc/#build-and-install-dema-rc-from-source","text":"You can also build dema-rc. For that you will need an armv7 toolchain with some specific tunables. Since we build dema-rc on CI, we already have a recommended toolchain based on buildroot . You can download the latest one: toolchain . Extract it to /opt and add to PATH: $ export PATH = /opt/arm-buildroot-linux-gnueabihf_sdk-buildroot/bin/: $PATH Configure dema-rc: $ meson setup \\ -Dboard = sc2 \\ --cross-file /opt/arm-buildroot-linux-gnueabihf_sdk-buildroot/etc/meson/cross-compilation.conf \\ build Build: $ ninja -C build Create bundle to install on SkyControler2: $ ninja -C build bundle Install on SkyController2: $ export ANDROID_SERIAL = 192 .168.53.1:9050 $ ./tools/install-sc2.sh build/dema-rc-bundle.tar.gz When developing on dema-rc and only modifying the main program, you can skip the bundle creation and push only that binary: $ adb push build/src/dema-rc /data/ftp/internal_000/dema-rc/usr/bin/dema-rc Note that the command above installs only the main binary. Check in the install log above the other files that need to be sent if you modified it.","title":"Build and install dema-rc from source"},{"location":"install-demarc/#change-ssid-dema-rc-will-connect-to","text":"As part of the installed files above, we install a script to start, stop and monitor the WiFi connections. Since SkyController2 will connect to Disco, you need to configure its SSID. The file is in /data/ftp/internal_000/ssid.txt .","title":"Change SSID dema-rc will connect to"},{"location":"install-demarc/#automatically-start-dema-rc","text":"dema-rc already installs the integration files to start dema-rc on boot. However it leaves the original SW stack as the default. To switch to dema-rc to use with ArduPilot, simply press the \"settings\" button on SkyController2. The LED that was red/green will now behave as following: Blinking blue when dema-rc is started and until it connects to WiFi Solid blue while it remains connected to a WiFi network.","title":"Automatically start dema-rc"},{"location":"rc-channel/","text":"RC Channel Map \u00b6 RC1 roll RC2 pitch RC3 throttle RC4 yaw RC5 (flight mode) Left rocker to the left = RTL, mid = FBWA, right= Manual RC6 settings-button RC7 home-button RC8 takeoff/land RC9 button B RC10 button A RC11 left trigger RC12 right trigger RC13 right scrollwheel scroll left RC14 right scrollwheel scroll right","title":"RC Channel Map"},{"location":"rc-channel/#rc-channel-map","text":"RC1 roll RC2 pitch RC3 throttle RC4 yaw RC5 (flight mode) Left rocker to the left = RTL, mid = FBWA, right= Manual RC6 settings-button RC7 home-button RC8 takeoff/land RC9 button B RC10 button A RC11 left trigger RC12 right trigger RC13 right scrollwheel scroll left RC14 right scrollwheel scroll right","title":"RC Channel Map"}]}